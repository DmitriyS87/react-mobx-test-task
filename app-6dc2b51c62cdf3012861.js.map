{"version":3,"sources":["webpack:///../src/components/Header/MainMenu/MainMenu.interface.ts","webpack:///../src/constants/routes.ts","webpack:///../src/constants/api.ts","webpack:///../src/components/Header/MainMenu/MainMenu.tsx","webpack:///../src/core/api.ts","webpack:///../src/stores/users/api-users.ts","webpack:///../src/stores/users/users.ts","webpack:///../src/stores/users/users.constants.ts","webpack:///../src/stores/posts/api-posts.ts","webpack:///../src/stores/posts/posts.ts","webpack:///../src/stores/posts/posts.constants.ts","webpack:///../src/components/Users/TableHeader/TableHeader.tsx","webpack:///../src/components/Users/Users.tsx","webpack:///../src/common/shared/Paper/Paper.tsx","webpack:///../src/components/Posts/Post/Post.tsx","webpack:///../src/components/Posts/Posts.tsx","webpack:///../src/components/App/App.tsx","webpack:///../src/core/history/history.ts","webpack:///../src/index.tsx"],"names":["MainMenuItem","MAIN_ROUTE","USERS_ROUTE","USERS_POSTS_ROUTE","API_BASE_URL","props","state","selected","MAIN","this","style","padding","theme","mode","onClick","key","setState","selectedKeys","Item","USERS","api","a","create","timeout","baseURL","interceptors","request","use","config","headers","Authorization","params","get","Object","keys","map","name","join","makeParamsString","users","isLoading","page","selectedUserId","paginationResponse","currentPage","perPage","pageCount","totalCount","nextPage","then","response","selectUser","data","result","length","Error","meta","_meta","err","console","log","id","find","user","posts","selectedPost","userId","user_id","selectPost","Title","push","className","disabled","size","type","selectRow","onSelectedRowChange","selectedRowKeys","String","bind","loadUsers","columns","title","dataIndex","render","avatarUrl","avatar","href","src","icon","UserOutlined","paginationConfig","total","current","pageSize","onChange","nexPage","hideOnSinglePage","showSizeChanger","showHeader","rowSelection","loading","dataSource","rowKey","onRow","record","pagination","children","body","Text","bordered","match","loadUserPosts","selectedUser","loadUser","first_name","last_name","post","Header","Footer","Content","exact","path","component","listen","window","scrollTo","entryPoint","document","getElementById","history"],"mappings":"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","file":"app-6dc2b51c62cdf3012861.js","sourcesContent":["export enum MainMenuItem {\n  MAIN = 'main',\n  USERS = 'users'\n}\n\nexport interface MainMenuState {\n  selected: MainMenuItem;\n}\n","export const MAIN_ROUTE = '/';\nexport const USERS_ROUTE = '/users';\nexport const USERS_POSTS_ROUTE = '/posts';\n","export const API_BASE_URL = 'https://gorest.co.in/public-api/';\n","import React, { Component } from 'react';\nimport { Menu } from 'antd';\nimport { MainMenuState, MainMenuItem } from './MainMenu.interface';\n\nclass MainMenu extends Component<{}, MainMenuState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      selected: MainMenuItem.MAIN\n    };\n  }\n\n  render() {\n    const { selected } = this.state;\n\n    return (\n      <>\n        <Menu\n          style={{ padding: '0 100px' }}\n          theme=\"dark\"\n          mode=\"horizontal\"\n          onClick={({ key }) => this.setState({ selected: key as MainMenuItem })}\n          selectedKeys={[selected]}\n        >\n          <Menu.Item key={MainMenuItem.MAIN}>Main</Menu.Item>\n          <Menu.Item key={MainMenuItem.USERS}>Users</Menu.Item>\n        </Menu>\n      </>\n    );\n  }\n}\n\nexport default MainMenu;\n","/* eslint-disable no-param-reassign */\nimport axios from 'axios';\nimport { ApiConstant } from '@constants';\n\nconst api = axios.create({\n  timeout: 10000,\n  baseURL: ApiConstant.API_BASE_URL\n});\n\napi.interceptors.request.use(config => {\n  if (process.env.API_ACCESS_TOKEN) {\n    config.headers.Authorization = `Bearer ${process.env.API_ACCESS_TOKEN}`;\n  }\n\n  return config;\n});\n\nexport default api;\n","import { Params } from '@types';\nimport api from '../../core/api';\n\nconst makeParamsString = (params: Params) =>\n  Object.keys(params)\n    .map(name => `${name}=${params[name]}`)\n    .join('&');\n\nexport const getUsers = (params?: Params) => (params ? api.get(`users?${makeParamsString(params)}`) : api.get('users'));\n\nexport const getUser = (id: string | number) => api.get(`users/${id}`);\n","/* eslint-disable no-underscore-dangle */\nimport { observable, action, computed } from 'mobx';\nimport { getUsers, getUser } from './api-users';\nimport { ApiUser } from './users.interface';\nimport { DEFAULT_USER_PER_PAGE, DEFAULT_USER_PAGE } from './users.constants';\n\nclass UsersStore {\n  @observable users: ApiUser[] = [];\n\n  @observable isLoading = false;\n\n  @observable page = 1;\n\n  @observable selectedUserId = '';\n\n  @observable paginationResponse = {\n    currentPage: DEFAULT_USER_PAGE,\n    perPage: DEFAULT_USER_PER_PAGE,\n    pageCount: 0,\n    totalCount: 0\n  };\n\n  @action\n  loadUsers(nextPage?: number) {\n    this.isLoading = true;\n    getUsers({\n      page: nextPage || this.page\n    })\n      .then(response => {\n        this.selectUser('');\n\n        if (response.data.result && response.data.result.length) {\n          this.users = response.data.result;\n          const meta = response.data._meta;\n          meta &&\n            (this.paginationResponse = {\n              currentPage: meta.currentPage || this.page,\n              perPage: meta.perPage || DEFAULT_USER_PER_PAGE,\n              pageCount: meta.pageCount || 0,\n              totalCount: meta.totalCount || 0\n            });\n          return;\n        }\n\n        throw new Error('System error. Data is unavailable');\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  }\n\n  @action\n  loadUser(id: string) {\n    this.isLoading = true;\n    getUser(id)\n      .then(response => {\n        if (response.data.result) {\n          this.users = [...this.users, response.data.result];\n          return;\n        }\n\n        throw new Error('System error. Data is unavailable');\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  }\n\n  @action\n  setPage(page: number) {\n    this.page = page;\n  }\n\n  @action\n  selectUser(id: string) {\n    this.selectedUserId = id;\n  }\n\n  @computed get selectedUser() {\n    const storedUser = this.users.find(user => user.id === this.selectedUserId);\n    return storedUser || null;\n  }\n}\n\nconst store = new UsersStore();\nexport default store;\n","export const DEFAULT_USER_PAGE = 1;\nexport const DEFAULT_USER_PER_PAGE = 20;\n","import { Params } from '@types';\nimport api from '../../core/api';\n\nconst makeParamsString = (params: Params) =>\n  Object.keys(params)\n    .map(name => `${name}=${params[name]}`)\n    .join('&');\n\nexport const getUserPosts = (params: Params) => api.get(`posts?${makeParamsString(params)}`);\n","/* eslint-disable no-underscore-dangle */\nimport { observable, action } from 'mobx';\nimport { getUserPosts } from './api-posts';\nimport { PostResult } from './posts.interface';\nimport { DEFAULT_POSTS_PAGE, DEFAULT_POSTS_PER_PAGE } from './posts.constants';\n\nclass PostsStore {\n  @observable posts: PostResult[] = [];\n\n  @observable isLoading = false;\n\n  @observable selectedPost = '';\n\n  @observable paginationResponse = {\n    currentPage: DEFAULT_POSTS_PAGE,\n    perPage: DEFAULT_POSTS_PER_PAGE,\n    pageCount: 0,\n    totalCount: 0\n  };\n\n  @action\n  loadUserPosts(userId: string, nextPage?: number) {\n    if (userId) {\n      this.isLoading = true;\n      getUserPosts({\n        page: nextPage || 1,\n        user_id: userId\n      })\n        .then(response => {\n          this.selectPost('');\n\n          if (response.data.result && response.data.result.length) {\n            this.posts = response.data.result;\n            console.log(response.data.result);\n            const meta = response.data._meta;\n            meta &&\n              (this.paginationResponse = {\n                currentPage: meta.currentPage || 1,\n                perPage: meta.perPage || DEFAULT_POSTS_PER_PAGE,\n                pageCount: meta.pageCount || 0,\n                totalCount: meta.totalCount || 0\n              });\n            return;\n          }\n\n          throw new Error('System error. Data is unavailable');\n        })\n        .catch(err => {\n          console.log(err);\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    }\n  }\n\n  @action\n  selectPost(id: string) {\n    this.selectedPost = id;\n  }\n}\n\nconst store = new PostsStore();\nexport default store;\n","export const DEFAULT_POSTS_PAGE = 1;\nexport const DEFAULT_POSTS_PER_PAGE = 20;\n","import React, { FunctionComponent } from 'react';\nimport { Button, Typography } from 'antd';\nimport { useHistory } from 'react-router';\nimport { AppRoute } from '@constants';\nimport { usersStore } from '@stores';\n\nconst TableHeader: FunctionComponent = () => {\n  const { Title } = Typography;\n  const { push } = useHistory();\n  const userId = usersStore.selectedUserId;\n\n  return (\n    <div className=\"main\">\n      <span>\n        <Title>Users list:</Title>\n      </span>\n      <Button\n        disabled={!userId}\n        size=\"large\"\n        type=\"link\"\n        onClick={() => push(`${AppRoute.USERS_POSTS_ROUTE}/${userId}`)}\n      >\n        Show comments\n      </Button>\n    </div>\n  );\n};\n\nexport default TableHeader;\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { Avatar, Table } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { UserLink, ApiUser } from '@stores/users/users.interface';\nimport { usersStore } from '@stores';\nimport { UsersProps, UsersState, UserPagintaionConfig } from './Users.interface';\nimport TableHeader from './TableHeader/TableHeader';\n\n@observer\nclass Users extends Component<UsersProps, UsersState> {\n  constructor(props: UsersProps) {\n    super(props);\n\n    this.onSelectedRowChange = this.onSelectedRowChange.bind(this);\n    this.selectRow = this.selectRow.bind(this);\n  }\n\n  componentDidMount() {\n    usersStore.loadUsers();\n  }\n\n  selectRow = (data: ApiUser) => {\n    const { selectedUserId } = usersStore;\n    if (selectedUserId === data.id) {\n      usersStore.selectUser('');\n    } else {\n      usersStore.selectUser(data.id);\n    }\n  };\n\n  onSelectedRowChange = (selectedRowKeys: React.ReactText[]) => {\n    usersStore.selectUser(String(selectedRowKeys[0]));\n  };\n\n  render() {\n    const { isLoading, users, paginationResponse, selectedUserId } = usersStore;\n\n    const columns = [\n      {\n        title: 'Фото',\n        dataIndex: '_links',\n        key: '_links',\n        render: (data: UserLink) => {\n          const avatarUrl = data?.avatar?.href;\n          if (avatarUrl) {\n            return (\n              <>\n                <Avatar src={avatarUrl} icon={<UserOutlined />} />\n              </>\n            );\n          }\n          return (\n            <>\n              <Avatar icon={<UserOutlined />} />\n            </>\n          );\n        }\n      },\n      {\n        title: 'Имя',\n        dataIndex: 'first_name',\n        key: 'first_name'\n      },\n      {\n        title: 'Фамилия',\n        dataIndex: 'last_name',\n        key: 'last_name'\n      },\n      {\n        title: 'Пол',\n        dataIndex: 'gender',\n        key: 'gender'\n      },\n      {\n        title: 'Почта',\n        dataIndex: 'email',\n        key: 'email'\n      },\n      {\n        title: 'Телефон',\n        dataIndex: 'phone',\n        key: 'phone'\n      },\n      {\n        title: 'Статус',\n        dataIndex: 'status',\n        key: 'status'\n      }\n    ];\n\n    const paginationConfig: UserPagintaionConfig = {\n      total: paginationResponse.totalCount,\n      current: paginationResponse.currentPage,\n      pageSize: paginationResponse.perPage,\n      onChange: (nexPage: number) => usersStore.loadUsers(nexPage),\n      hideOnSinglePage: true,\n      showSizeChanger: false\n    };\n\n    return (\n      <>\n        <Table\n          showHeader\n          title={() => <TableHeader />}\n          rowSelection={{ onChange: this.onSelectedRowChange, type: 'radio', selectedRowKeys: [selectedUserId] }}\n          loading={isLoading}\n          dataSource={users}\n          columns={columns}\n          rowKey=\"id\"\n          onRow={record => ({\n            onClick: () => this.selectRow(record)\n          })}\n          pagination={paginationConfig}\n        />\n      </>\n    );\n  }\n}\n\nexport default Users;\n","import React, { FunctionComponent } from 'react';\n\nconst Paper: FunctionComponent = ({ children }) => {\n  return <div className=\"paper\">{children}</div>;\n};\n\nexport default Paper;\n","import React, { FunctionComponent } from 'react';\nimport { Card, Typography } from 'antd';\nimport { PostProps } from './Post.interface';\n\nconst Post: FunctionComponent<PostProps> = ({ data }) => {\n  const { title, body } = data;\n  const { Text } = Typography;\n\n  return (\n    <Card className=\"post-card\" title={title} bordered>\n      <Text>{body}</Text>\n    </Card>\n  );\n};\n\nexport default Post;\n","import React, { PureComponent } from 'react';\nimport { postsStore, usersStore } from '@stores';\nimport { observer } from 'mobx-react';\nimport { Typography } from 'antd';\nimport { Paper } from '@shared';\nimport Post from './Post/Post';\n\n@observer\nclass Posts extends PureComponent<Props, State> {\n  componentDidMount() {\n    const { match } = this.props;\n    const { params } = match;\n\n    if (params.id) {\n      postsStore.loadUserPosts(params.id);\n\n      !usersStore.selectedUser && usersStore.loadUser(params.id);\n    }\n  }\n\n  render() {\n    const { posts } = postsStore;\n    const { selectedUser } = usersStore;\n\n    const { Title, Text } = Typography;\n\n    return (\n      <Paper>\n        <Title>Posts </Title>\n        {selectedUser && <Text> made by {`${selectedUser.first_name} ${selectedUser.last_name}`}</Text>}\n\n        {posts && (\n          <>\n            {posts.map(post => (\n              <Post key={post.id} data={post} />\n            ))}\n          </>\n        )}\n      </Paper>\n    );\n  }\n}\n\nexport default Posts;\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport React, { FunctionComponent } from 'react';\nimport { Route, Switch } from 'react-router';\nimport { AppRoute } from '@constants';\n\nimport { Layout } from 'antd';\nimport MainMenu from '../Header/MainMenu/MainMenu';\nimport Users from '../Users/Users';\nimport Posts from '../Posts/Posts';\n\nconst { Header, Footer, Content } = Layout;\n\nconst App: FunctionComponent = () => {\n  return (\n    <Layout className=\"layout\">\n      <Header className=\"header\">\n        <MainMenu />\n      </Header>\n      <Content style={{ padding: '0 100px' }}>\n        <Switch>\n          <Route\n            exact\n            path={AppRoute.MAIN_ROUTE}\n            render={() => (\n              <>\n                <p>Главная страница</p>\n              </>\n            )}\n          />\n          <Route exact path={AppRoute.USERS_ROUTE} component={Users} />\n          <Route exact path={`${AppRoute.USERS_POSTS_ROUTE}/:id`} component={Posts} />\n        </Switch>\n      </Content>\n      <Footer className=\"footer\">Тестовое задание выполнил Дмитрий Щукин</Footer>\n    </Layout>\n  );\n};\n\nexport default App;\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n\nhistory.listen(() => window.scrollTo(0, 0));\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport App from './components/App/App';\nimport './common/assets/styles.less';\nimport { history } from './core/history/history';\n\nconst entryPoint = document.getElementById(`app`);\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  entryPoint\n);\n"],"sourceRoot":""}