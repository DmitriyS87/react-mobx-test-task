{"version":3,"sources":["webpack:///../src/constants/routes.ts","webpack:///../src/constants/api.ts","webpack:///../src/core/history/history.ts","webpack:///../src/components/Header/MainMenu/MainMenu.constants.ts","webpack:///../src/components/Header/MainMenu/MainMenu.utils.ts","webpack:///../src/components/Header/MainMenu/MainMenu.tsx","webpack:///../src/core/api.ts","webpack:///../src/stores/users/api-users.ts","webpack:///../src/stores/users/users.ts","webpack:///../src/stores/users/users.constants.ts","webpack:///../src/stores/posts/api-posts.ts","webpack:///../src/stores/posts/posts.ts","webpack:///../src/stores/posts/posts.constants.ts","webpack:///../src/components/Users/TableHeader/TableHeader.tsx","webpack:///../src/components/Users/Users.tsx","webpack:///../src/common/shared/Paper/Paper.tsx","webpack:///../src/components/Posts/Post/Post.tsx","webpack:///../src/components/Posts/Posts.tsx","webpack:///../src/components/MainPage/MainPage.tsx","webpack:///../src/components/App/App.tsx","webpack:///../src/index.tsx"],"names":["MAIN","USERS","POSTS","API_BASE_URL","listen","window","scrollTo","MainMenuItem","mainPathName","selectedMenuItem","props","state","selected","setStateByLocation","bind","handleMenuClick","this","pathname","paths","location","match","setState","key","push","style","padding","defaultSelectedKeys","theme","mode","onClick","selectedKeys","Item","api","a","create","timeout","baseURL","interceptors","request","use","config","headers","Authorization","params","get","Object","keys","map","name","join","makeParamsString","users","isLoading","page","selectedUserId","paginationResponse","currentPage","perPage","pageCount","totalCount","nextPage","then","response","selectUser","data","result","length","notification","success","message","meta","_meta","warn","description","err","error","id","find","user","posts","selectedPost","userId","user_id","selectPost","Title","className","level","disabled","size","type","selectRow","onSelectedRowChange","selectedRowKeys","String","loadUsers","columns","title","dataIndex","render","avatarUrl","avatar","href","src","icon","UserOutlined","paginationConfig","total","current","pageSize","onChange","nexPage","hideOnSinglePage","showSizeChanger","showHeader","rowSelection","loading","dataSource","rowKey","onRow","record","pagination","children","body","Text","bordered","loadUserPosts","selectedUser","loadUser","first_name","last_name","post","Paragraph","strong","to","Header","Footer","Content","exact","path","component","entryPoint","document","getElementById","history"],"mappings":"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","file":"app-d1d6b7fd61cf569b632e.js","sourcesContent":["export const MAIN = '/';\nexport const USERS = '/users';\nexport const POSTS = '/posts';\n","export const API_BASE_URL = 'https://gorest.co.in/public-api/';\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n\nhistory.listen(() => window.scrollTo(0, 0));\n\nexport const getMainPathName = () => {\n  const { pathname } = history.location;\n\n  // eslint-disable-next-line no-useless-escape\n  const paths = pathname.match(/^[\\/](\\w+)?/);\n  return paths ? paths[0] : pathname;\n};\n","export enum MainMenuItem {\n  MAIN = 'MAIN',\n  USERS = 'USERS'\n}\n","import { AppRoute } from '@constants';\nimport { MainMenuItem } from './MainMenu.constants';\n\nexport const getSelectedMenuItem = (mainPathName: string) => {\n  let selectedMenuItem = '';\n\n  if (mainPathName === AppRoute.MAIN) {\n    selectedMenuItem = MainMenuItem.MAIN;\n  }\n\n  if (mainPathName === AppRoute.USERS) {\n    selectedMenuItem = MainMenuItem.USERS;\n  }\n\n  return selectedMenuItem;\n};\n","import React, { Component } from 'react';\nimport { Menu } from 'antd';\nimport { history, getMainPathName } from '@core/history/history';\nimport { AppRoute } from '@constants';\nimport { ClickParam } from 'antd/lib/menu';\nimport { MainMenuItem } from './MainMenu.constants';\nimport { MainMenuState } from './MainMenu.interface';\nimport { getSelectedMenuItem } from './MainMenu.utils';\n\nclass MainMenu extends Component<{}, MainMenuState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      selected: ''\n    };\n\n    this.setStateByLocation = this.setStateByLocation.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.setStateByLocation();\n  }\n\n  setStateByLocation() {\n    const mainPathName = getMainPathName();\n\n    this.setState({\n      selected: getSelectedMenuItem(mainPathName)\n    });\n  }\n\n  handleMenuClick({ key }: ClickParam) {\n    const { push } = history;\n\n    this.setState(\n      {\n        selected: MainMenuItem[key as MainMenuItem]\n      },\n      () => push(AppRoute[key as MainMenuItem] || '')\n    );\n  }\n\n  render() {\n    const { selected } = this.state;\n\n    return (\n      <>\n        <Menu\n          style={{ padding: '0 100px' }}\n          defaultSelectedKeys={['']}\n          theme=\"dark\"\n          mode=\"horizontal\"\n          onClick={this.handleMenuClick}\n          selectedKeys={[selected]}\n        >\n          <Menu.Item key={MainMenuItem.MAIN}>Main</Menu.Item>\n          <Menu.Item key={MainMenuItem.USERS}>Users</Menu.Item>\n        </Menu>\n      </>\n    );\n  }\n}\n\nexport default MainMenu;\n","/* eslint-disable no-param-reassign */\nimport axios from 'axios';\nimport { ApiConstant } from '@constants';\n\nconst api = axios.create({\n  timeout: 10000,\n  baseURL: ApiConstant.API_BASE_URL\n});\n\napi.interceptors.request.use(config => {\n  if (process.env.API_ACCESS_TOKEN) {\n    config.headers.Authorization = `Bearer ${process.env.API_ACCESS_TOKEN}`;\n  }\n\n  return config;\n});\n\nexport default api;\n","import { Params } from '@types';\nimport api from '../../core/api';\n\nconst makeParamsString = (params: Params) =>\n  Object.keys(params)\n    .map(name => `${name}=${params[name]}`)\n    .join('&');\n\nexport const getUsers = (params?: Params) => (params ? api.get(`users?${makeParamsString(params)}`) : api.get('users'));\n\nexport const getUser = (id: string | number) => api.get(`users/${id}`);\n","/* eslint-disable no-underscore-dangle */\nimport { observable, action, computed } from 'mobx';\nimport { notification } from 'antd';\nimport { getUsers, getUser } from './api-users';\nimport { ApiUser } from './users.interface';\nimport { DEFAULT_USER_PER_PAGE, DEFAULT_USER_PAGE } from './users.constants';\n\nclass UsersStore {\n  @observable users: ApiUser[] = [];\n\n  @observable isLoading = false;\n\n  @observable page = 1;\n\n  @observable selectedUserId = '';\n\n  @observable paginationResponse = {\n    currentPage: DEFAULT_USER_PAGE,\n    perPage: DEFAULT_USER_PER_PAGE,\n    pageCount: 0,\n    totalCount: 0\n  };\n\n  @action\n  loadUsers(nextPage?: number) {\n    this.isLoading = true;\n    getUsers({\n      page: nextPage || this.page\n    })\n      .then(response => {\n        this.selectUser('');\n\n        if (response.data.result && response.data.result.length) {\n          notification.success({ message: 'Good deal!' });\n          this.users = response.data.result;\n          const meta = response.data._meta;\n          meta &&\n            (this.paginationResponse = {\n              currentPage: meta.currentPage || this.page,\n              perPage: meta.perPage || DEFAULT_USER_PER_PAGE,\n              pageCount: meta.pageCount || 0,\n              totalCount: meta.totalCount || 0\n            });\n          return;\n        }\n\n        notification.warn({\n          message: 'System error',\n          description: 'Data is unavailable. Please try again later'\n        });\n      })\n      .catch(err => {\n        notification.error({ message: err });\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  }\n\n  @action\n  loadUser(id: string) {\n    this.isLoading = true;\n    getUser(id)\n      .then(response => {\n        if (response.data.result) {\n          this.users = [...this.users, response.data.result];\n          return;\n        }\n\n        notification.warn({\n          message: 'System error',\n          description: 'Data is unavailable. Please try again later'\n        });\n      })\n      .catch(err => {\n        notification.error({ message: err });\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  }\n\n  @action\n  setPage(page: number) {\n    this.page = page;\n  }\n\n  @action\n  selectUser(id: string) {\n    this.selectedUserId = id;\n  }\n\n  @computed get selectedUser() {\n    const storedUser = this.users.find(user => user.id === this.selectedUserId);\n    return storedUser || null;\n  }\n}\n\nconst store = new UsersStore();\nexport default store;\n","export const DEFAULT_USER_PAGE = 1;\nexport const DEFAULT_USER_PER_PAGE = 20;\n","import { Params } from '@types';\nimport api from '../../core/api';\n\nconst makeParamsString = (params: Params) =>\n  Object.keys(params)\n    .map(name => `${name}=${params[name]}`)\n    .join('&');\n\nexport const getUserPosts = (params: Params) => api.get(`posts?${makeParamsString(params)}`);\n","/* eslint-disable no-underscore-dangle */\nimport { observable, action } from 'mobx';\nimport { notification } from 'antd';\nimport { getUserPosts } from './api-posts';\nimport { PostResult } from './posts.interface';\nimport { DEFAULT_POSTS_PAGE, DEFAULT_POSTS_PER_PAGE } from './posts.constants';\n\nclass PostsStore {\n  @observable posts: PostResult[] = [];\n\n  @observable isLoading = false;\n\n  @observable selectedPost = '';\n\n  @observable paginationResponse = {\n    currentPage: DEFAULT_POSTS_PAGE,\n    perPage: DEFAULT_POSTS_PER_PAGE,\n    pageCount: 0,\n    totalCount: 0\n  };\n\n  @action\n  loadUserPosts(userId: string, nextPage?: number) {\n    if (userId) {\n      this.isLoading = true;\n      getUserPosts({\n        page: nextPage || 1,\n        user_id: userId\n      })\n        .then(response => {\n          this.selectPost('');\n\n          if (response.data.result && response.data.result.length) {\n            this.posts = response.data.result;\n            const meta = response.data._meta;\n            meta &&\n              (this.paginationResponse = {\n                currentPage: meta.currentPage || 1,\n                perPage: meta.perPage || DEFAULT_POSTS_PER_PAGE,\n                pageCount: meta.pageCount || 0,\n                totalCount: meta.totalCount || 0\n              });\n            return;\n          }\n\n          notification.warn({\n            message: 'System error',\n            description: 'Data is unavailable. Please try again later'\n          });\n        })\n        .catch(err => {\n          notification.error({ message: err });\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    }\n  }\n\n  @action\n  selectPost(id: string) {\n    this.selectedPost = id;\n  }\n}\n\nconst store = new PostsStore();\nexport default store;\n","export const DEFAULT_POSTS_PAGE = 1;\nexport const DEFAULT_POSTS_PER_PAGE = 20;\n","import React, { FunctionComponent } from 'react';\nimport { Button, Typography } from 'antd';\nimport { useHistory } from 'react-router';\nimport { AppRoute } from '@constants';\nimport { usersStore } from '@stores';\n\nconst TableHeader: FunctionComponent = () => {\n  const { Title } = Typography;\n  const { push } = useHistory();\n  const userId = usersStore.selectedUserId;\n\n  return (\n    <div className=\"main\">\n      <span>\n        <Title level={2}>Users list:</Title>\n      </span>\n      <Button disabled={!userId} size=\"large\" type=\"link\" onClick={() => push(`${AppRoute.USERS}/${userId}`)}>\n        Show comments\n      </Button>\n    </div>\n  );\n};\n\nexport default TableHeader;\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { Avatar, Table } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { UserLink, ApiUser } from '@stores/users/users.interface';\nimport { usersStore } from '@stores';\nimport { UsersState, UserPagintaionConfig } from './Users.interface';\nimport TableHeader from './TableHeader/TableHeader';\n\n@observer\nclass Users extends Component<{}, UsersState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.onSelectedRowChange = this.onSelectedRowChange.bind(this);\n    this.selectRow = this.selectRow.bind(this);\n  }\n\n  componentDidMount() {\n    usersStore.loadUsers();\n  }\n\n  selectRow = (data: ApiUser) => {\n    const { selectedUserId } = usersStore;\n    if (selectedUserId === data.id) {\n      usersStore.selectUser('');\n    } else {\n      usersStore.selectUser(data.id);\n    }\n  };\n\n  onSelectedRowChange = (selectedRowKeys: React.ReactText[]) => {\n    usersStore.selectUser(String(selectedRowKeys[0]));\n  };\n\n  render() {\n    const { isLoading, users, paginationResponse, selectedUserId } = usersStore;\n\n    const columns = [\n      {\n        title: 'Фото',\n        dataIndex: '_links',\n        key: '_links',\n        render: (data: UserLink) => {\n          const avatarUrl = data?.avatar?.href;\n          if (avatarUrl) {\n            return (\n              <>\n                <Avatar src={avatarUrl} icon={<UserOutlined />} />\n              </>\n            );\n          }\n          return (\n            <>\n              <Avatar icon={<UserOutlined />} />\n            </>\n          );\n        }\n      },\n      {\n        title: 'Имя',\n        dataIndex: 'first_name',\n        key: 'first_name'\n      },\n      {\n        title: 'Фамилия',\n        dataIndex: 'last_name',\n        key: 'last_name'\n      },\n      {\n        title: 'Пол',\n        dataIndex: 'gender',\n        key: 'gender'\n      },\n      {\n        title: 'Почта',\n        dataIndex: 'email',\n        key: 'email'\n      },\n      {\n        title: 'Телефон',\n        dataIndex: 'phone',\n        key: 'phone'\n      },\n      {\n        title: 'Статус',\n        dataIndex: 'status',\n        key: 'status'\n      }\n    ];\n\n    const paginationConfig: UserPagintaionConfig = {\n      total: paginationResponse.totalCount,\n      current: paginationResponse.currentPage,\n      pageSize: paginationResponse.perPage,\n      onChange: (nexPage: number) => usersStore.loadUsers(nexPage),\n      hideOnSinglePage: true,\n      showSizeChanger: false\n    };\n\n    return (\n      <>\n        <Table\n          showHeader\n          title={() => <TableHeader />}\n          rowSelection={{ onChange: this.onSelectedRowChange, type: 'radio', selectedRowKeys: [selectedUserId] }}\n          loading={isLoading}\n          dataSource={users}\n          columns={columns}\n          rowKey=\"id\"\n          onRow={record => ({\n            onClick: () => this.selectRow(record)\n          })}\n          pagination={paginationConfig}\n        />\n      </>\n    );\n  }\n}\n\nexport default Users;\n","import React, { FunctionComponent } from 'react';\n\nconst Paper: FunctionComponent = ({ children }) => {\n  return <div className=\"paper\">{children}</div>;\n};\n\nexport default Paper;\n","import React, { FunctionComponent } from 'react';\nimport { Card, Typography } from 'antd';\nimport { PostProps } from './Post.interface';\n\nconst Post: FunctionComponent<PostProps> = ({ data }) => {\n  const { title, body } = data;\n  const { Text } = Typography;\n\n  return (\n    <Card className=\"post-card\" title={title} bordered>\n      <Text>{body}</Text>\n    </Card>\n  );\n};\n\nexport default Post;\n","import React, { PureComponent } from 'react';\nimport { postsStore, usersStore } from '@stores';\nimport { observer } from 'mobx-react';\nimport { Typography } from 'antd';\nimport { Paper } from '@shared';\nimport Post from './Post/Post';\nimport { PostsProps } from './Posts.interface';\n\n@observer\nclass Posts extends PureComponent<PostsProps, {}> {\n  componentDidMount() {\n    const { match } = this.props;\n    const { params } = match;\n\n    if (params.id) {\n      postsStore.loadUserPosts(params.id);\n\n      !usersStore.selectedUser && usersStore.loadUser(params.id);\n    }\n  }\n\n  render() {\n    const { posts } = postsStore;\n    const { selectedUser } = usersStore;\n\n    const { Title, Text } = Typography;\n\n    return (\n      <Paper>\n        <Title level={2}>Posts </Title>\n        {selectedUser && <Text> made by {`${selectedUser.first_name} ${selectedUser.last_name}`}</Text>}\n\n        {posts && (\n          <>\n            {posts.map(post => (\n              <Post key={post.id} data={post} />\n            ))}\n          </>\n        )}\n      </Paper>\n    );\n  }\n}\n\nexport default Posts;\n","import React, { FunctionComponent } from 'react';\nimport { Typography } from 'antd';\nimport { Paper } from '@shared';\nimport { Link } from 'react-router-dom';\nimport { AppRoute } from '@constants';\n\nconst MainPage: FunctionComponent = () => {\n  const { Title, Paragraph } = Typography;\n\n  return (\n    <Paper>\n      <Title level={2}>Главная страница</Title>\n      <Paragraph strong>\n        Добро пожаловать на главную страницу. Вы можете посмотреть список пользователей на странице{' '}\n        <Link to={AppRoute.USERS}>&quot;Users&quot;</Link>.\n      </Paragraph>\n    </Paper>\n  );\n};\n\nexport default MainPage;\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport React, { FunctionComponent } from 'react';\nimport { Route, Switch, Redirect } from 'react-router';\nimport { AppRoute } from '@constants';\n\nimport { Layout, Typography } from 'antd';\nimport MainMenu from '../Header/MainMenu/MainMenu';\nimport Users from '../Users/Users';\nimport Posts from '../Posts/Posts';\nimport MainPage from '../MainPage/MainPage';\n\nconst { Header, Footer, Content } = Layout;\n\nconst App: FunctionComponent = () => {\n  const { Title } = Typography;\n\n  return (\n    <Layout className=\"layout\">\n      <Header className=\"header\">\n        <MainMenu />\n      </Header>\n      <Content style={{ padding: '0 100px' }}>\n        <Switch>\n          <Route exact path={AppRoute.MAIN} component={MainPage} />\n          <Route exact path={AppRoute.USERS} component={Users} />\n          <Route\n            exact\n            path={`${AppRoute.USERS}/:id`}\n            render={({ match }) => <Redirect to={`${AppRoute.USERS}/${match.params.id}${AppRoute.POSTS}`} />}\n          />\n          <Route exact path={`${AppRoute.USERS}/:id${AppRoute.POSTS}`} component={Posts} />\n\n          <Route render={() => <Title level={2}>Page not found</Title>} />\n        </Switch>\n      </Content>\n      <Footer className=\"footer\">Тестовое задание выполнил Дмитрий Щукин</Footer>\n    </Layout>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport App from './components/App/App';\nimport './common/assets/styles.less';\nimport { history } from './core/history/history';\n\nconst entryPoint = document.getElementById(`app`);\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  entryPoint\n);\n"],"sourceRoot":""}