{"version":3,"sources":["webpack:///../src/constants/routes.ts","webpack:///../src/constants/api.ts","webpack:///../src/core/history/history.ts","webpack:///../src/utils/getMainPathName.ts","webpack:///../src/components/Header/MainMenu/MainMenu.constants.ts","webpack:///../src/components/Header/MainMenu/MainMenu.tsx","webpack:///../src/components/Header/MainMenu/MainMenu.utils.ts","webpack:///../src/utils/normalizeData.ts","webpack:///../src/core/api.ts","webpack:///../src/stores/users/api-users.ts","webpack:///../src/stores/users/users.ts","webpack:///../src/stores/users/users.constants.ts","webpack:///../src/stores/posts/api-posts.ts","webpack:///../src/stores/posts/posts.ts","webpack:///../src/stores/posts/posts.constants.ts","webpack:///../src/stores/comments/api-comments.ts","webpack:///../src/utils/makeParamsString.ts","webpack:///../src/stores/comments/comments.ts","webpack:///../src/components/Users/TableHeader/TableHeader.tsx","webpack:///../src/components/Users/Users.tsx","webpack:///../src/common/shared/Paper/Paper.tsx","webpack:///../src/components/Posts/Post/Post.tsx","webpack:///../src/components/Posts/Posts.tsx","webpack:///../src/components/MainPage/MainPage.tsx","webpack:///../src/components/App/App.tsx","webpack:///../src/index.tsx"],"names":["MAIN","USERS","POSTS","API_BASE_URL","basename","listen","window","scrollTo","MainMenuItem","props","getStateByLocation","bind","handleMenuClick","path","mainPathName","selectedMenuItem","paths","match","console","log","getMainPathName","key","push","pathname","this","location","selected","style","padding","defaultSelectedKeys","theme","mode","onClick","selectedKeys","Item","normalizedData","data","reduce","acc","user","id","api","a","create","timeout","baseURL","interceptors","request","use","config","headers","Authorization","params","get","Object","keys","map","name","join","makeParamsString","storedUsers","pageData","isLoading","page","selectedUserId","paginationResponse","currentPage","perPage","pageCount","totalCount","nextPage","includes","String","then","response","selectUser","result","length","meta","_meta","normalizedUsers","notification","warn","message","description","err","error","pageUsers","userId","storedPosts","selectedPostId","pagination","user_id","normalizedPosts","pagePosts","postId","storedComments","loadComments","post_id","saveComments","comments","Title","className","level","disabled","size","type","selectRow","onSelectedRowChange","selectedRowKeys","loadUsers","users","columns","title","dataIndex","render","avatarUrl","avatar","href","src","icon","UserOutlined","paginationConfig","total","current","pageSize","onChange","nexPage","hideOnSinglePage","showSizeChanger","showHeader","rowSelection","loading","dataSource","rowKey","onRow","record","children","oldProps","selectPost","body","Text","bordered","comment","author","strong","content","post","loadUserPosts","selectedUser","loadUser","posts","marginBottom","first_name","last_name","Paragraph","to","Header","Footer","Content","exact","component","entryPoint","document","getElementById","history"],"mappings":"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","file":"app-7d2afaf64d6b0967e07b.js","sourcesContent":["export const MAIN = '/';\nexport const USERS = '/users';\nexport const POSTS = `/posts`;\n","export const API_BASE_URL = 'https://gorest.co.in/public-api/';\n","import { createBrowserHistory } from 'history';\n\nconst basename = process.env.NODE_ENV === 'production' ? process.env.SERVER_BASE_URL : '';\n\nexport const history = createBrowserHistory({ basename });\n\nhistory.listen(() => window.scrollTo(0, 0));\n","const MAIN_PATH_INDEX = process.env.NODE_ENV === 'production' ? 1 : 0;\n\nexport const getMainPathName = (path: string) => {\n  // eslint-disable-next-line no-useless-escape\n  const paths = path.match(/^[\\/](\\w+)?/);\n  console.log({ paths });\n  return paths ? paths[0] : path;\n};\n","export enum MainMenuItem {\n  MAIN = 'MAIN',\n  USERS = 'USERS'\n}\n","/* eslint-disable class-methods-use-this */\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { Menu } from 'antd';\nimport { history } from '@core/history/history';\nimport { AppRoute } from '@constants';\nimport { ClickParam } from 'antd/lib/menu';\nimport { getMainPathName } from '@utils/getMainPathName';\nimport { MainMenuItem } from './MainMenu.constants';\nimport { MainMenuState, MainMenuProps } from './MainMenu.interface';\nimport { getSelectedMenuItem } from './MainMenu.utils';\n\nclass MainMenu extends Component<MainMenuProps, MainMenuState> {\n  constructor(props: MainMenuProps) {\n    super(props);\n\n    this.getStateByLocation = this.getStateByLocation.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n  }\n\n  getStateByLocation(path: string) {\n    const mainPathName = getMainPathName(path);\n    return getSelectedMenuItem(mainPathName);\n  }\n\n  handleMenuClick({ key }: ClickParam) {\n    const { push } = history;\n\n    push(AppRoute[key as MainMenuItem] || '');\n  }\n\n  render() {\n    const { location } = this.props;\n    const { pathname } = location;\n    const selected = this.getStateByLocation(pathname);\n\n    return (\n      <>\n        <Menu\n          style={{ padding: '0 100px' }}\n          defaultSelectedKeys={['']}\n          theme=\"dark\"\n          mode=\"horizontal\"\n          onClick={this.handleMenuClick}\n          selectedKeys={[selected]}\n        >\n          <Menu.Item key={MainMenuItem.MAIN}>Main</Menu.Item>\n          <Menu.Item key={MainMenuItem.USERS}>Users</Menu.Item>\n        </Menu>\n      </>\n    );\n  }\n}\n\nexport default withRouter(MainMenu);\n","import { AppRoute } from '@constants';\nimport { MainMenuItem } from './MainMenu.constants';\n\nexport const getSelectedMenuItem = (mainPathName: string) => {\n  let selectedMenuItem = '';\n\n  if (mainPathName === AppRoute.MAIN) {\n    selectedMenuItem = MainMenuItem.MAIN;\n  }\n\n  if (mainPathName === AppRoute.USERS) {\n    selectedMenuItem = MainMenuItem.USERS;\n  }\n\n  return selectedMenuItem;\n};\n","import { IndexedData, NormalizedData } from './utils.interface';\n\nexport const normalizedData = <T extends IndexedData>(data: T[]): NormalizedData<T> =>\n  data.reduce((acc, user) => {\n    return { ...acc, [user.id]: user };\n  }, {});\n","/* eslint-disable no-param-reassign */\nimport axios from 'axios';\nimport { ApiConstant } from '@constants';\n\nconst api = axios.create({\n  timeout: 10000,\n  baseURL: ApiConstant.API_BASE_URL\n});\n\napi.interceptors.request.use(config => {\n  if (process.env.API_ACCESS_TOKEN) {\n    config.headers.Authorization = `Bearer ${process.env.API_ACCESS_TOKEN}`;\n  }\n\n  return config;\n});\n\nexport default api;\n","import { Params } from '@types';\nimport api from '../../core/api';\n\nconst makeParamsString = (params: Params) =>\n  Object.keys(params)\n    .map(name => `${name}=${params[name]}`)\n    .join('&');\n\nexport const getUsers = (params?: Params) => (params ? api.get(`users?${makeParamsString(params)}`) : api.get('users'));\n\nexport const getUser = (id: string | number) => api.get(`users/${id}`);\n","/* eslint-disable no-underscore-dangle */\nimport { observable, action, computed, autorun, toJS } from 'mobx';\nimport { notification } from 'antd';\nimport { normalizedData } from '@utils/normalizeData';\nimport { StoredData, PageData } from 'src/types/store';\nimport { getUsers, getUser } from './api-users';\nimport { ApiUser } from './users.interface';\nimport { DEFAULT_USER_PER_PAGE, DEFAULT_USER_PAGE } from './users.constants';\n\nclass UsersStore {\n  @observable storedUsers: StoredData<ApiUser> = {};\n\n  @observable pageData: PageData = {};\n\n  @observable isLoading = false;\n\n  @observable page = 1;\n\n  @observable selectedUserId: string | null = null;\n\n  @observable paginationResponse = {\n    currentPage: DEFAULT_USER_PAGE,\n    perPage: DEFAULT_USER_PER_PAGE,\n    pageCount: 0,\n    totalCount: 0\n  };\n\n  @action\n  loadUsers(nextPage?: number) {\n    this.isLoading = true;\n    const page = nextPage || this.page;\n\n    if (Object.keys(this.pageData).includes(String(page))) {\n      this.paginationResponse = { ...this.paginationResponse, currentPage: page };\n      this.page = page;\n      this.isLoading = false;\n      return;\n    }\n\n    getUsers({\n      page\n    })\n      .then(response => {\n        this.selectUser('');\n\n        if (response.data.result && response.data.result.length) {\n          const meta = response.data._meta;\n          if (meta) {\n            this.paginationResponse = {\n              currentPage: meta.currentPage || DEFAULT_USER_PAGE,\n              perPage: meta.perPage || DEFAULT_USER_PER_PAGE,\n              pageCount: meta.pageCount || 0,\n              totalCount: meta.totalCount || 0\n            };\n          }\n\n          const { result } = response.data;\n\n          const normalizedUsers = normalizedData<ApiUser>(result);\n\n          this.storedUsers = { ...this.storedUsers, ...normalizedUsers };\n\n          this.pageData[page] = Object.keys(normalizedUsers);\n\n          this.page = meta.currentPage;\n          return;\n        }\n\n        notification.warn({\n          message: 'System error',\n          description: 'Data is unavailable. Please try again later'\n        });\n      })\n      .catch(err => {\n        notification.error({ message: err });\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  }\n\n  @action\n  loadUser(id: string) {\n    this.isLoading = true;\n    getUser(id)\n      .then(response => {\n        if (response.data.result) {\n          const { result } = response.data;\n          this.storedUsers = { ...this.storedUsers, [result.id]: result };\n          this.selectUser(result.id);\n          return;\n        }\n\n        notification.warn({\n          message: 'System error',\n          description: 'Data is unavailable. Please try again later'\n        });\n      })\n      .catch(err => {\n        notification.error({ message: err });\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  }\n\n  @action\n  selectUser(id: string | null) {\n    this.selectedUserId = id;\n  }\n\n  @computed get selectedUser() {\n    return this.selectedUserId ? this.storedUsers[this.selectedUserId] : '';\n  }\n\n  @computed get users(): ApiUser[] {\n    const pageUsers = this.pageData[this.page] ?? null;\n    if (pageUsers) {\n      return pageUsers.map(userId => this.storedUsers[userId]);\n    }\n\n    return [];\n  }\n}\n\nconst store = new UsersStore();\nexport default store;\n","export const DEFAULT_USER_PAGE = 1;\nexport const DEFAULT_USER_PER_PAGE = 20;\n","import { Params } from '@types';\nimport api from '@core/api';\n\nconst makeParamsString = (params: Params) =>\n  Object.keys(params)\n    .map(name => `${name}=${params[name]}`)\n    .join('&');\n\nexport const getUserPosts = (params: Params) => api.get(`posts?${makeParamsString(params)}`);\n","/* eslint-disable no-underscore-dangle */\nimport { observable, action, computed, autorun, toJS } from 'mobx';\nimport { notification } from 'antd';\nimport { StoredData, PageData } from 'src/types/store';\nimport { normalizedData } from '@utils/normalizeData';\nimport { getUserPosts } from './api-posts';\nimport { ApiPost } from './posts.interface';\nimport { DEFAULT_POSTS_PAGE, DEFAULT_POSTS_PER_PAGE } from './posts.constants';\n\nclass PostsStore {\n  @observable storedPosts: StoredData<ApiPost> = {};\n\n  @observable pageData: PageData = {};\n\n  @observable isLoading = false;\n\n  @observable page = 1;\n\n  @observable selectedPostId = '';\n\n  @observable pagination = {\n    currentPage: DEFAULT_POSTS_PAGE,\n    perPage: DEFAULT_POSTS_PER_PAGE,\n    pageCount: 0,\n    totalCount: 0\n  };\n\n  @action\n  selectPost(id: string) {\n    this.selectedPostId === id ? (this.selectedPostId = '') : (this.selectedPostId = id);\n  }\n\n  @action\n  loadUserPosts(userId: string, nextPage?: number) {\n    if (userId) {\n      this.isLoading = true;\n      const page = nextPage || this.page;\n\n      if (Object.keys(this.pageData).includes(String(page))) {\n        this.pagination = { ...this.pagination, currentPage: page };\n        this.page = page;\n        this.isLoading = false;\n        return;\n      }\n\n      getUserPosts({\n        page,\n        user_id: userId\n      })\n        .then(response => {\n          this.selectedPostId = '';\n\n          if (response.data.result && response.data._meta) {\n            const meta = response.data._meta;\n            meta &&\n              (this.pagination = {\n                currentPage: meta.currentPage || DEFAULT_POSTS_PAGE,\n                perPage: meta.perPage || DEFAULT_POSTS_PER_PAGE,\n                pageCount: meta.pageCount || 0,\n                totalCount: meta.totalCount || 0\n              });\n\n            const { result } = response.data;\n\n            const normalizedPosts = normalizedData<ApiPost>(result);\n\n            this.storedPosts = normalizedPosts;\n\n            this.pageData[page] = Object.keys(this.storedPosts);\n\n            return;\n          }\n\n          notification.warn({\n            message: 'System error',\n            description: 'Data is unavailable. Please try again later'\n          });\n        })\n        .catch(err => {\n          notification.error({ message: err });\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    }\n  }\n\n  @computed get posts(): ApiPost[] {\n    const pagePosts = this.pageData[this.page] ?? null;\n    if (pagePosts) {\n      return pagePosts.map(postId => this.storedPosts[postId]);\n    }\n\n    return [];\n  }\n}\n\nconst store = new PostsStore();\nexport default store;\n","export const DEFAULT_POSTS_PAGE = 1;\nexport const DEFAULT_POSTS_PER_PAGE = 20;\n","import { Params } from '@types';\nimport api from '@core/api';\nimport { makeParamsString } from '@utils/makeParamsString';\n\nexport const getPostComments = (params?: Params) =>\n  params ? api.get(`comments?${makeParamsString(params)}`) : api.get(`comments`);\n","import { Params } from '@types';\n\nexport const makeParamsString = (params: Params) =>\n  Object.keys(params)\n    .map(name => `${name}=${params[name]}`)\n    .join('&');\n","import { observable, action, computed, autorun, toJS } from 'mobx';\nimport { getPostComments } from './api-comments';\nimport { StoredComments, ApiComment } from './comments.interface';\n\nclass Comments {\n  @observable isLoading = false;\n\n  @observable postId: string | null = null;\n\n  @observable storedComments: StoredComments = {};\n\n  @action\n  loadComments = (postId: string) => {\n    if (postId && !Object.keys(this.storedComments).includes(postId)) {\n      this.postId = postId;\n      this.isLoading = true;\n\n      getPostComments({ post_id: postId })\n        .then(response => {\n          this.saveComments(postId, response.data.result);\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    }\n  };\n\n  @action\n  saveComments(id: string, comments: ApiComment[]) {\n    this.storedComments[id] = comments;\n  }\n\n  @computed get comments() {\n    return this.postId ? this.storedComments[this.postId] || [] : [];\n  }\n}\n\nconst commentsStore = new Comments();\nexport default commentsStore;\n","import React, { FunctionComponent } from 'react';\nimport { Button, Typography } from 'antd';\nimport { useHistory } from 'react-router';\nimport { AppRoute } from '@constants';\nimport { usersStore } from '@stores';\n\nconst TableHeader: FunctionComponent = () => {\n  const { Title } = Typography;\n  const { push } = useHistory();\n  const userId = usersStore.selectedUserId;\n\n  return (\n    <div className=\"main\">\n      <span>\n        <Title level={2}>Users list:</Title>\n      </span>\n      <Button disabled={!userId} size=\"large\" type=\"link\" onClick={() => push(`${AppRoute.USERS}/${userId}`)}>\n        Show comments\n      </Button>\n    </div>\n  );\n};\n\nexport default TableHeader;\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { Avatar, Table } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { UserLink, ApiUser } from '@stores/users/users.interface';\nimport { usersStore } from '@stores';\nimport { UsersState, UserPagintaionConfig } from './Users.interface';\nimport TableHeader from './TableHeader/TableHeader';\n\n@observer\nclass Users extends Component<{}, UsersState> {\n  componentDidMount() {\n    usersStore.loadUsers();\n  }\n\n  selectRow = (data: ApiUser) => {\n    const { selectedUserId } = usersStore;\n    if (selectedUserId === data.id) {\n      usersStore.selectUser(null);\n    } else {\n      usersStore.selectUser(data.id);\n    }\n  };\n\n  onSelectedRowChange = (selectedRowKeys: React.ReactText[]) => {\n    usersStore.selectUser(String(selectedRowKeys[0]));\n  };\n\n  render() {\n    const { isLoading, users, paginationResponse, selectedUserId } = usersStore;\n\n    const columns = [\n      {\n        title: 'Фото',\n        dataIndex: '_links',\n        key: '_links',\n        render: (data: UserLink) => {\n          const avatarUrl = data?.avatar?.href;\n          if (avatarUrl) {\n            return <Avatar src={avatarUrl} icon={<UserOutlined />} />;\n          }\n          return <Avatar icon={<UserOutlined />} />;\n        }\n      },\n      {\n        title: 'Имя',\n        dataIndex: 'first_name',\n        key: 'first_name'\n      },\n      {\n        title: 'Фамилия',\n        dataIndex: 'last_name',\n        key: 'last_name'\n      },\n      {\n        title: 'Пол',\n        dataIndex: 'gender',\n        key: 'gender'\n      },\n      {\n        title: 'Почта',\n        dataIndex: 'email',\n        key: 'email'\n      },\n      {\n        title: 'Телефон',\n        dataIndex: 'phone',\n        key: 'phone'\n      },\n      {\n        title: 'Статус',\n        dataIndex: 'status',\n        key: 'status'\n      }\n    ];\n\n    const paginationConfig: UserPagintaionConfig = {\n      total: paginationResponse.totalCount,\n      current: paginationResponse.currentPage,\n      pageSize: paginationResponse.perPage,\n      onChange: (nexPage: number) => usersStore.loadUsers(nexPage),\n      hideOnSinglePage: true,\n      showSizeChanger: false\n    };\n\n    return (\n      <>\n        <Table\n          showHeader\n          title={() => <TableHeader />}\n          rowSelection={{ onChange: this.onSelectedRowChange, type: 'radio', selectedRowKeys: [selectedUserId || ''] }}\n          loading={isLoading}\n          dataSource={users}\n          columns={columns}\n          rowKey=\"id\"\n          onRow={record => ({\n            onClick: () => this.selectRow(record)\n          })}\n          pagination={paginationConfig}\n        />\n      </>\n    );\n  }\n}\n\nexport default Users;\n","import React, { FunctionComponent } from 'react';\n\nconst Paper: FunctionComponent = ({ children }) => {\n  return <div className=\"paper\">{children}</div>;\n};\n\nexport default Paper;\n","import React, { Component } from 'react';\nimport { Card, Comment, Typography } from 'antd';\nimport cn from 'classnames';\nimport { postsStore, commentsStore } from '@stores';\nimport { observer } from 'mobx-react';\nimport { PostProps } from './Post.interface';\n\n@observer\nclass Post extends Component<PostProps> {\n  componentDidUpdate(oldProps: PostProps) {\n    const { data, selected } = this.props;\n    if (oldProps.selected !== selected) {\n      const { loadComments } = commentsStore;\n      const { id } = data;\n      loadComments(id);\n    }\n  }\n\n  render() {\n    const { data, selected = false } = this.props;\n    const { comments, isLoading } = commentsStore;\n    const { selectPost } = postsStore;\n    const { title, body, id } = data;\n    const { Text, Title } = Typography;\n\n    return (\n      <>\n        <Card\n          className={cn('post-card', { 'post-card__selected': selected })}\n          title={title}\n          bordered\n          onClick={() => selectPost(id)}\n        >\n          <Text>{body}</Text>\n        </Card>\n        {isLoading && <div>Loading</div>}\n        {selected &&\n          comments.map(comment => (\n            <Comment\n              key={comment.id}\n              author={<Text strong>{comment.name}</Text>}\n              // avatar={\n              //   <Avatar\n              //     src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\n              //     alt=\"Han Solo\"\n              //   />\n              // }\n              content={<Text>{comment.body}</Text>}\n            />\n          ))}\n      </>\n    );\n  }\n}\n\nexport default Post;\n","import React, { PureComponent } from 'react';\nimport { postsStore, usersStore } from '@stores';\nimport { observer } from 'mobx-react';\nimport { Typography } from 'antd';\nimport { Paper } from '@sharedComponents';\nimport Post from './Post/Post';\nimport { PostsProps } from './Posts.interface';\n\n@observer\nclass Posts extends PureComponent<PostsProps, {}> {\n  componentDidMount() {\n    const { match } = this.props;\n    const { params } = match;\n    const { id, post } = params;\n\n    if (id) {\n      postsStore.loadUserPosts(id);\n\n      !usersStore.selectedUser && usersStore.loadUser(id);\n    }\n  }\n\n  render() {\n    const { posts, selectedPostId } = postsStore;\n    const { selectedUser } = usersStore;\n    const { Title, Text } = Typography;\n\n    return (\n      <Paper>\n        <Title level={2}>Posts </Title>\n        {selectedUser && (\n          <Text style={{ marginBottom: '20px' }}>\n            {' '}\n            made by {`${selectedUser.first_name} ${selectedUser.last_name}`}\n          </Text>\n        )}\n\n        {posts.length > 0 && (\n          <>\n            {posts.map(post => (\n              <Post key={post.id} data={post} selected={post.id === selectedPostId} />\n            ))}\n          </>\n        )}\n        {!posts.length && <Text>The user has no publications.</Text>}\n      </Paper>\n    );\n  }\n}\n\nexport default Posts;\n","import React, { FunctionComponent } from 'react';\nimport { Typography } from 'antd';\nimport { Paper } from '@sharedComponents';\nimport { Link } from 'react-router-dom';\nimport { AppRoute } from '@constants';\n\nconst MainPage: FunctionComponent = () => {\n  const { Title, Paragraph } = Typography;\n\n  return (\n    <Paper>\n      <Title level={2}>Главная страница</Title>\n      <Paragraph strong>\n        Добро пожаловать на главную страницу. Вы можете посмотреть список пользователей на странице{' '}\n        <Link to={AppRoute.USERS}>&quot;Users&quot;</Link>.\n      </Paragraph>\n    </Paper>\n  );\n};\n\nexport default MainPage;\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport React, { FunctionComponent } from 'react';\nimport { Route, Switch, Redirect } from 'react-router';\nimport { AppRoute } from '@constants';\n\nimport { Layout, Typography } from 'antd';\nimport MainMenu from '../Header/MainMenu/MainMenu';\nimport Users from '../Users/Users';\nimport Posts from '../Posts/Posts';\nimport MainPage from '../MainPage/MainPage';\n\nconst { Header, Footer, Content } = Layout;\n\nconst App: FunctionComponent = () => {\n  const { Title } = Typography;\n\n  return (\n    <Layout className=\"layout\">\n      <Header className=\"header\">\n        <MainMenu />\n      </Header>\n      <Content style={{ padding: '0 100px' }}>\n        <Switch>\n          <Route exact path={AppRoute.MAIN} component={MainPage} />\n          <Route exact path={AppRoute.USERS} component={Users} />\n          <Route\n            exact\n            path={`${AppRoute.USERS}/:id`}\n            render={({ match }) => <Redirect to={`${AppRoute.USERS}/${match.params.id}${AppRoute.POSTS}`} />}\n          />\n          <Route exact path={`${AppRoute.USERS}/:id${AppRoute.POSTS}/:post`} component={Posts} />\n          <Route exact path={`${AppRoute.USERS}/:id${AppRoute.POSTS}`} component={Posts} />\n\n          <Route render={() => <Title level={2}>Page not found</Title>} />\n        </Switch>\n      </Content>\n      <Footer className=\"footer\">Тестовое задание выполнил Дмитрий Щукин</Footer>\n    </Layout>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport App from './components/App/App';\nimport './common/assets/styles.less';\nimport { history } from './core/history/history';\n\nconst entryPoint = document.getElementById(`app`);\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  entryPoint\n);\n"],"sourceRoot":""}